/* global describe, test, beforeEach, expect, jest */
import { Object3D } from 'three';
import Tree from '../../src/core/tree';

describe('Tree class', () => {
  let root1;
  let root2;
  let parent;
  const parentInst = new Object3D();
  let child1;
  const child1Inst = new Object3D();
  let child2;
  const child2Inst = new Object3D();
  let grandChild1;
  const grandChild1Inst = new Object3D();
  let grandChild2;
  const grandChild2Inst = new Object3D();
  let listener1;
  let listener2;
  let listener3;
  let listener4;
  let listener5;
  let listener6;
  let listener7;
  let listener8;
  let listener9;
  beforeEach(() => {
    listener1 = jest.fn();
    listener2 = jest.fn();
    listener3 = jest.fn();
    listener4 = jest.fn();
    listener5 = jest.fn();
    listener6 = jest.fn();
    listener7 = jest.fn();
    listener8 = jest.fn();
    listener9 = jest.fn();
    root1 = new Tree();
    root2 = new Tree();
    parent = new Tree(root1, () => parentInst);
    child1 = new Tree(parent, () => child1Inst);
    child2 = new Tree(parent, () => child2Inst);
    grandChild1 = new Tree(child1, () => grandChild1Inst);
    grandChild2 = new Tree(child2, () => grandChild2Inst);
    root1.listen(listener1);
    root1.listen(listener2);
    root2.listen(listener9);
    child1.listen(listener3);
    child1.listen(listener4);
    child2.listen(listener5);
    grandChild1.listen(listener6);
    grandChild2.listen(listener7);
    grandChild2.listen(listener8);
  });

  test('inst method should returns the result of getter function passed to constructor', () => {
    expect(root1.inst()).toBeUndefined();
    expect(root2.inst()).toBeUndefined();
    expect(parent.inst()).toBe(parentInst);
    expect(child1.inst()).toBe(child1Inst);
    expect(child2.inst()).toBe(child2Inst);
    expect(grandChild1.inst()).toBe(grandChild1Inst);
    expect(grandChild2.inst()).toBe(grandChild2Inst);
  });
  test('emit method should trigger all listeners in tree', () => {
    child1.emit();
    expect(listener1).toHaveBeenCalledTimes(1);
    expect(listener2).toHaveBeenCalledTimes(1);
    expect(listener3).toHaveBeenCalledTimes(1);
    expect(listener4).toHaveBeenCalledTimes(1);
    expect(listener5).toHaveBeenCalledTimes(1);
    expect(listener6).toHaveBeenCalledTimes(1);
    expect(listener7).toHaveBeenCalledTimes(1);
    expect(listener8).toHaveBeenCalledTimes(1);
    expect(listener9).not.toHaveBeenCalled();
  });
  test('unlisten method should remove the listener', () => {
    grandChild2.unlisten(listener7);
    child2.unlisten(listener5);
    child1.emit();
    expect(listener1).toHaveBeenCalledTimes(1);
    expect(listener2).toHaveBeenCalledTimes(1);
    expect(listener3).toHaveBeenCalledTimes(1);
    expect(listener4).toHaveBeenCalledTimes(1);
    expect(listener6).toHaveBeenCalledTimes(1);
    expect(listener8).toHaveBeenCalledTimes(1);
    expect(listener7).not.toHaveBeenCalled();
    expect(listener5).not.toHaveBeenCalled();
    expect(listener9).not.toHaveBeenCalled();
  });
});
